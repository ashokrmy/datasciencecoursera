{
    "contents" : "\n\nlibrary(shiny)\n\n\n# Define server logic required to summarize and view the selected\n# dataset\nshinyServer(function(input, output) {\n  \n  # The output$summary depends on the datasetInput reactive\n  # expression, so will be re-executed whenever datasetInput is\n  # invalidated\n  # (i.e. whenever the input$dataset changes)\n  output$summary <- renderPrint({\n    summary(iris)\n  })\n  \n  # The output$view depends on both the databaseInput reactive\n  # expression and input$obs, so will be re-executed whenever\n  # input$dataset or input$obs is changed. \n  output$view <- renderTable({\n    set.seed(62433)\n    iris[sample(nrow(iris), size = input$obs),]\n  })\n  \n  # By declaring datasetInput as a reactive expression we ensure \n  # that:\n  #\n  #  1) It is only called when the inputs it depends on changes\n  #  2) The computation and result are shared by all the callers \n  #    (it only executes a single time)\n  #\n  algorithmInput <- reactive(input$algorithm)\n  \n  output$results <- renderPrint({\n    \n\n    # split in training testing datasets\n    trainIndex <- sample(nrow(iris), size = nrow(iris)*input$slidertrainsplit)\n    training = iris[trainIndex,]\n    testing = iris[-trainIndex,]\n    \n    # apply selected classification algorithm\n    if(algorithmInput()==\"rpart\") {\n      \n      # print classification parameters\n      print(\"Algorithm selected: rpart\")\n      print(paste(\"Training set: \", input$slidertrainsplit*100, \"%\", sep = \"\"))\n      print(paste(\"Testing set: \", (1-input$slidertrainsplit)*100, \"%\", sep = \"\"))\n      \n      # build rpart model\n      library(rpart)\n      set.seed(62433)\n      model <- rpart(Species ~ . , data= iris)\n      \n      # test rpart model\n      pred <- predict(model, testing, type  = \"class\")\n      print(table(predicted = pred, reference = testing$Species))\n      \n      # print model\n      summary(model)\n      \n    } else if(algorithmInput()==\"randomForest\") {\n      \n      # print classification parameters\n      print(\"Algorithm selected: randomForest\")\n      print(paste(\"Training set: \", input$slidertrainsplit*100, \"%\", sep = \"\"))\n      print(paste(\"Testing set: \", (1-input$slidertrainsplit)*100, \"%\", sep = \"\"))\n      \n      # build randomForest model\n      library(randomForest)\n      set.seed(62433)\n      model <- randomForest(Species ~ . , data= iris)\n      \n      # test randomForest model\n      pred <- predict(model, testing, type  = \"class\")\n      print(table(predicted = pred, reference = testing$Species))\n      \n      # print model\n      summary(model)\n      \n      \n    } else if(algorithmInput()==\"lda\") {\n        \n      \n      # print classification parameters\n      print(\"Algorithm selected: lda\")\n      print(paste(\"Training set: \", input$slidertrainsplit*100, \"%\", sep = \"\"))\n      print(paste(\"Testing set: \", (1-input$slidertrainsplit)*100, \"%\", sep = \"\"))\n      \n      # build lda model\n      library(MASS)\n      set.seed(62433)\n      model <- lda(Species ~ . , data= iris)\n      \n      # test lda model\n      pred <- predict(model, testing, type  = \"class\")\n      print(table(predicted = pred$class, reference = testing$Species))\n      \n      # print model\n      summary(model)      \n      \n    }  else{\n      print(\"Error no Algorithm selected\")\n    }\n    \n  }) \n\n})",
    "created" : 1405851103054.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "59723189",
    "id" : "BA7DFA25",
    "lastKnownWriteTime" : 1405868452,
    "path" : "~/Dropbox/Data Science Specialization/9 - Developing Data Products/ShinyAppProject/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}