runApp()
library(shiny)
runApp()
library(shiny)
runApp("ShinyAppProject")
install.packages("shiny")
library(shiny)
runApp("ShinyAppProject")
ls()
dir()
runApp()
# to display the app within RStudio
rstudio::viewer("http://localhost:8100")
runApp()
# to display the app within RStudio
rstudio::viewer("http://localhost:8100")
runApp()
runApp(display.mode = "showcase", launch.browser = rstudio::viewer)
runExample("03_reactivity")
library(datasets)
?iris
?mtcars
# to run the app in RStudio viewer
runApp(display.mode = "showcase", launch.browser = rstudio::viewer)
# to run the app in the browser
runApp()
runExample("03_reactivity")
# to run the app in the browser
runApp()
runApp(display.mode = "showcase")
runExample("03_reactivity")
# to run the app in the browser and show the code
runApp(display.mode = "showcase")
runExample("03_reactivity")
runExample("03_reactivity")
# to run the app in the browser and show the code
runApp(display.mode = "showcase")
# to run the app in the browser and show the code
runApp(display.mode = "showcase")
# to run the app in the browser and show the code
runApp(display.mode = "showcase")
# to run the app in the browser and show the code
runApp(display.mode = "showcase")
# to run the app in the browser and show the code
runApp(display.mode = "showcase")
# to run the app in the browser and show the code
runApp(display.mode = "showcase")
runExample("03_reactivity")
# to run the app in the browser and show the code
runApp(display.mode = "showcase")
# to run the app in the browser and show the code
runApp(display.mode = "showcase")
?sliderInput
# to run the app in the browser and show the code
runApp(display.mode = "showcase")
# to run the app in the browser and show the code
runApp(display.mode = "showcase")
library(caret)
?createDataPartition
iris
concrete
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
str(AlzheimerDisease)
AlzheimerDisease
str(AlzheimerDisease)
data(AlzheimerDisease)
iris
# to run the app in the browser and show the code
runApp(display.mode = "showcase")
# to run the app in the browser and show the code
runApp(display.mode = "showcase")
# split in training testing datasets
trainIndex = createDataPartition(iris$Species,
p = input$slidertrainsplit,
list=FALSE)
training = iris[trainIndex,]
testing = iris[-trainIndex,]
trainIndex = createDataPartition(iris$Species,
p = 0.7,
list=FALSE)
training = iris[trainIndex,]
testing = iris[-trainIndex,]
training
str(training)
str(testing)
# print classification parameters
print("Algorithm selected: randomForest")
print(paste("Training set: ", input$slidertrainsplit*100, "%", sep = ""))
print(paste("Testing set: ", (1-input$slidertrainsplit)*100, "%", sep = ""))
set.seed(62433)
model.rf <- train(Species ~ . , data= training,  method = "rf")
print(model.rf)
set.seed(62433)
model.rf <- train(Species ~ . , data= training,  method = "rf")
print(model.rf)
pred.rf <- predict(model.rf, testing)
confusionMatrix(pred.rf, testing$Species)
# to run the app in the browser and show the code
runApp(display.mode = "showcase")
# to run the app in the browser and show the code
runApp(display.mode = "showcase")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?sample
nrows(iris)
nrow(iris)
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='diegolopezpozueta', token='F3DF687050242E4E59BEFBD4F30C5704', secret='xudQAotljNW5ayn7NhfhcUGJisSuD4sTwXYWhGJh')
deployApp()
install.packages("RcppEigen")
install.packages("rstudioapi")
deployApp()
library(shinyapps)
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?titlePanel
shiny::runApp()
tableOutput("view"),
shiny::runApp()
shiny::runApp()
?subTitlePanel
shiny::runApp()
shiny::runApp()
?sidebarPanel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shinyapps)
deployApp()
deployApp()
shinyapps::setAccountInfo(name='diegolopezpozueta', token='F3DF687050242E4E59BEFBD4F30C5704', secret='xudQAotljNW5ayn7NhfhcUGJisSuD4sTwXYWhGJh')
deployApp()
deployApp()
shiny::runApp()
library(shinyapps)
deployApp()
deployApp()
shiny::runApp()
shiny::runApp()
library(shinyapps)
deployApp()
deployApp()
trainIndex <- sample(nrow(iris), size = nrow(iris) * input$slidertrainsplit))
training = iris[trainIndex,]
testing = iris[-trainIndex,]
trainIndex <- sample(nrow(iris), size = nrow(iris) * 0.7))
trainIndex <- sample(nrow(iris), size = nrow(iris) * 0.7)
training = iris[trainIndex,]
testing = iris[-trainIndex,]
str(iris)
?confusionMatrix
shiny::runApp()
shiny::runApp()
?rpart
model <- rpart(Species ~ . , data= training)
print(model)
pred <- predict(model, testing)
table(pred, testing$Species)
pred
model <- train(Species ~ . , data= training,  method = "rpart")
pred <- predict(model, testing)
pred
deployApp()
shiny::runApp()
deployApp()
shiny::runApp()
load.libraries <- function(
require(caret)
)
loadlibraries <- function(
require(caret)
)
load.libraries <- function(){
require(caret)
}
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
deployApp()
devtools::install_github('caret')
model <- rpart(Species ~ . , data= iris)
print(model)
summary(model)
print(model)
?predict.rpart
pred <- predict(model, testing, type  = "class")
table(pred, testing$Species)
table(predicted = pred, reference = testing$Species)
shiny::runApp()
deployApp()
deployApp()
install.packages("nloptr")
deployApp()
library(shinyapps)
deployApp()
library(lda)
install.packages("lda")
deployApp()
shiny::runApp()
shiny::runApp()
deployApp()
terminateApp("ShinnyAppProject")
terminateApp("ShinnyAppExample")
terminateApp("ShinyAppExample")
terminateApp("ShinyAppProject")
# build randomForest model
library(randomForest)
set.seed(62433)
model <- randomForest(Species ~ . , data= iris)
summary(model)
# test randomForest model
pred <- predict(model, testing, type  = "class")
table(predicted = pred, reference = testing$Species)
trainIndex <- sample(nrow(iris), size = nrow(iris)*0.7)
training = iris[trainIndex,]
testing = iris[-trainIndex,]
# build rpart model
library(rpart)
set.seed(62433)
model <- rpart(Species ~ . , data= iris)
summary(model)
# test rpart model
pred <- predict(model, testing, type  = "class")
table(predicted = pred, reference = testing$Species)
# build randomForest model
library(randomForest)
set.seed(62433)
model <- randomForest(Species ~ . , data= iris)
summary(model)
# test randomForest model
pred <- predict(model, testing, type  = "class")
table(predicted = pred, reference = testing$Species)
# build lda model
library(lda)
set.seed(62433)
model <- lda(Species ~ . , data= iris)
summary(model)
# test randomForest model
pred <- predict(model, testing, type  = "class")
table(predicted = pred, reference = testing$Species)
# build lda model
library(lda)
set.seed(62433)
model <- lda(Species ~ . , data= iris)
library(MASS)
set.seed(62433)
model <- lda(Species ~ . , data= iris)
summary(model)
# test randomForest model
pred <- predict(model, testing, type  = "class")
table(predicted = pred, reference = testing$Species)
summary(model)
# test randomForest model
pred <- predict(model, testing, type  = "class")
table(predicted = pred, reference = testing$Species)
pred
table(predicted = pred$class, reference = testing$Species)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
library(shinyapps)
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
